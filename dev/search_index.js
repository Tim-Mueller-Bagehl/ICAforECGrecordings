var documenterSearchIndex = {"docs":
[{"location":"#ICAforECGrecordings","page":"Home","title":"ICAforECGrecordings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ICAforECGrecordings.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#ICAforECGrecordings.cumulant_matrices-Tuple{AbstractMatrix, Number}","page":"Home","title":"ICAforECGrecordings.cumulant_matrices","text":"cumulant_matrices(X::AbstractMatrix)\n\nBlind separation of real signals with SHIBBS.\n\nArguments\n\nX::Matrix{Float64}: Matrix that contains the signals that have to be unmixed. \n\nReturns  CM=cumulant_matrices(X) a NxN*nbcm cumulant matrix.\n\n\n\n\n\n","category":"method"},{"location":"#ICAforECGrecordings.estimate_cumulant_matrices-Tuple{AbstractMatrix}","page":"Home","title":"ICAforECGrecordings.estimate_cumulant_matrices","text":"estimate_cumulant_matrices(X::AbstractMatrix) -> Matrix{E}\n\nCompute the set of fourth-order cumulant matrices for the signals stored as rows of X.\n\nArguments\n\nX::AbstractMatrix{<:Number}   An nxT data matrix, where each of the n rows is a sequence of T observations.\n\nReturns\n\nCM::Matrix{E} where E = eltype(X)   An nx(nnbcm) matrix formed by horizontally concatenating `nbcm = n(n+1)÷2` individual nxn cumulant blocks.   Each block corresponds to the fourth-order cumulant of the i-th and j-th signals (with i ≥ j).\n\n\n\n\n\n","category":"method"},{"location":"#ICAforECGrecordings.jade-Tuple{AbstractMatrix}","page":"Home","title":"ICAforECGrecordings.jade","text":"jade(data::AbstractMatrix{<:Real}) -> Matrix{Float64}\n\nPerform Blind Source Separation on multichannel time-series data using the JADE (Joint Approximate Diagonalization of Eigen-matrices) algorithm.\n\nArguments\n\ndata::AbstractMatrix{<:Real}   An Nx(m+1) matrix where the first column is a time vector of length N, and the remaining m columns are the observed mixed signals.\n\nReturns\n\nresult::Matrix{Float64}   An Nx(m+1) matrix whose first column is the original time vector, and whose next m columns are the estimated source signals, ordered as they emerge from the JADE separation process.\n\n\n\n\n\n","category":"method"},{"location":"#ICAforECGrecordings.joint_diagonalization","page":"Home","title":"ICAforECGrecordings.joint_diagonalization","text":"joint_diagonalization(CM_in::AbstractMatrix, T::Int; max_sweeps::Int=10)\n\nCompute an approximate joint diagonalization of a set of K symmetric mxm matrices that are concatenated horizontally in CM_in, using a Jacobi-style algorithm.\n\nArguments\n\nCM_in::AbstractMatrix{<:Real}   Input matrix of size m x (m*K).  Each contiguous block of m columns   corresponds to one symmetric matrix to be jointly diagonalized.\nT::Int   A scaling parameter (often the number of samples) used to set the rotation threshold.\nmax_sweeps::Int=10   Maximum number of full sweeps over all index pairs before terminating.\n\nReturns\n\nV::Matrix{Float64}   An mxm orthogonal matrix whose columns jointly diagonalize the blocks.\nCM::Matrix{Float64}   The transformed version of CM_in, such that each mxm block is as close to   diagonal as possible under the rotation V.\n\n\n\n\n\n","category":"function"},{"location":"#ICAforECGrecordings.joint_diagonalization-Tuple{AbstractMatrix, Real, Number}","page":"Home","title":"ICAforECGrecordings.joint_diagonalization","text":"joint_diagonalization(CM::AbstractMatrix, threshhold::Real)\n\nBlind separation of real signals with SHIBBS.\n\nArguments\n\nCM::AbstractMatrix: Matrix that contains the signals that have to be unmixed. \n\n-threshhold::Real: A threshhold for the for the rotation  Returns  V = joint_diagonalization(CM, threshhold) a NxN diagonalized matrix.\n\n\n\n\n\n","category":"method"},{"location":"#ICAforECGrecordings.load_example_data-Tuple{}","page":"Home","title":"ICAforECGrecordings.load_example_data","text":"load_example_data()\n\nLoad example data from a .dat file for testing purposes. Returns a matrix containing the data.\n\n\n\n\n\n","category":"method"},{"location":"#ICAforECGrecordings.plot_dataset-Tuple{AbstractMatrix{Float64}}","page":"Home","title":"ICAforECGrecordings.plot_dataset","text":"plot_dataset(data::AbstractMatrix{Float64})\n\nPlot a dataset with time on the x-axis and multiple signals on the y-axis.\n\nArguments\n\ndata::AbstractMatrix{Float64}: Matrix where the first column represents time and the remaining columns represent different signals.\n\n\n\n\n\n","category":"method"},{"location":"#ICAforECGrecordings.read_dataset_from_dat-Tuple{String}","page":"Home","title":"ICAforECGrecordings.read_dataset_from_dat","text":"read_dataset_from_dat(Path :: String)\n\nReads .dat File from a File Location.  returns 9x2497 Matrix {Float64} with our dataset\n\n\n\n\n\n","category":"method"},{"location":"#ICAforECGrecordings.separate_sources-Tuple{AbstractMatrix, AbstractMatrix}","page":"Home","title":"ICAforECGrecordings.separate_sources","text":"separate_sources(V::AbstractMatrix, W::AbstractMatrix) -> B::Matrix{Float64}\n\nCompute a scaled and permuted separation matrix B given a demixing matrix V and a mixing matrix W, ordering output components by estimated energy and ensuring a consistent sign convention.\n\nArguments\n\nV::AbstractMatrix{<:Real}   Demixing (unmixing) matrix of size mxm (e.g., returned by a joint diagonalizer).\nW::AbstractMatrix{<:Real}   Mixing matrix of size mxm (inverse of the true source mixing).\n\nReturns\n\nB::Matrix{Float64}   Separation matrix of size mxm such that B * X yields estimated source signals. Rows of B are ordered by descending source energy and each row is scaled to have a positive first coefficient (up to a small offset).\n\n\n\n\n\n","category":"method"},{"location":"#ICAforECGrecordings.shibbs","page":"Home","title":"ICAforECGrecordings.shibbs","text":"shibbs(X::AbstractMatrix,m::Int)\n\nBlind separation of real signals with SHIBBS.\n\nArguments\n\nX::AbstractMatrix:  Matrix that contains the signals that have to be unmixed. \nm=nothing: amount of signals that should be extracted from X. default same amount of singals as source\n\nReturns  B=shibbsR(X) a mxn separating matrix such that S=B*X is an mxT matrix of estimated source signals.\n\n\n\n\n\n","category":"function"},{"location":"#ICAforECGrecordings.whiten-Tuple{AbstractMatrix}","page":"Home","title":"ICAforECGrecordings.whiten","text":"whiten(data::AbstractMatrix) -> Tuple{Matrix, Matrix}\n\nPerforms whitening on the given data matrix.\n\nWhitening transforms the input signals so that each signal has unit variance and all signals are uncorrelated. This is a common preprocessing step before applying Independent Component Analysis (ICA).\n\nArguments\n\ndata: An abstract matrix of size (n_samples, n_signals+1) where the first column is time and the remaining n_signals columns are the observed signals.\n\nReturns\n\ndata_white::Matrix: A matrix of the same size as data, where the first column is the original time vector and the remaining columns are the whitened signals.\nW_white::Matrix: The whitening transform matrix of size (n_signals, n_signals) such that X_white = X_centered * W_white.\n\n\n\n\n\n","category":"method"}]
}

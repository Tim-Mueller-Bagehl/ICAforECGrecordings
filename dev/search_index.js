var documenterSearchIndex = {"docs":
[{"location":"getting_started/#Getting-Started-Guide","page":"Getting Started","title":"Getting Started Guide","text":"","category":"section"},{"location":"getting_started/#1.-Read-the-data","page":"Getting Started","title":"1. Read the data","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"data = read_dataset_from_dat(\"./data/foetal_ecg.dat\")","category":"page"},{"location":"getting_started/#2.-Call-select-the-Seperator-and-call-solve()","page":"Getting Started","title":"2. Call select the Seperator and call solve()","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"shibbs_signals = solve(ShibbsSeperator(), data)\njade_signals = solve(JadeSeperator(), data)","category":"page"},{"location":"getting_started/#3.-Plot","page":"Getting Started","title":"3. Plot","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"plot_dataset(shibbs_signals)\nplot_dataset(jade_signals)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"","category":"page"},{"location":"getting_started/#Full-Example","page":"Getting Started","title":"Full Example","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Pkg\nPkg.activate(temp=true)\nPkg.add(url=\"https://github.com/Tim-Mueller-Bagehl/ICAforECGrecordings\")\nPkg.resolve()\nPkg.instantiate()\nPkg.add(\"Plots\")\nimport ICAforECGrecordings\nusing ICAforECGrecordings: whiten, plot_dataset, read_dataset_from_dat, solve, JadeSeperator, ShibbsSeperator\nusing Plots: savefig\n\n\n# load data\ndata = read_dataset_from_dat(\"./data/foetal_ecg.dat\")\nprintln(\"Data loaded successfully.\")\n\n# create plots dir\ntry \n    mkdir(\"plots\")\ncatch e\n    println(e)\nend\n\n\n# save plots \nsavefig(plot_dataset(solve(ShibbsSeperator(), data)), \"plots/shibbs.png\")\nsavefig(plot_dataset(solve(JadeSeperator(), data)), \"plots/jade.png\")\nsavefig(plot_dataset(solve(PicardoSeperator(), data)), \"plots/picardo.png\")","category":"page"},{"location":"#ICAforECGrecordings","page":"Home","title":"ICAforECGrecordings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ICAforECGrecordings.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#ICAforECGrecordings.cumulant_matrices-Tuple{AbstractMatrix, Number}","page":"Home","title":"ICAforECGrecordings.cumulant_matrices","text":"cumulant_matrices(X::AbstractMatrix, m::Number)\n\nBlind separation of real signals with SHIBBS.\n\nArguments\n\nX::AbstractMatrix: Matrix that contains the signals that have to be unmixed. \nm::Number: The number of signals that should be extracted from X.\n\nReturns  CM=cumulant_matrices(X, m) a NxN*nbcm cumulant matrix.\n\n\n\n\n\n","category":"method"},{"location":"#ICAforECGrecordings.jade-Tuple{AbstractMatrix, AbstractMatrix}","page":"Home","title":"ICAforECGrecordings.jade","text":"jade(data::AbstractMatrix{<:Real}) -> Matrix{Float64}\n\nPerform Blind Source Separation on multichannel time-series data using the JADE (Joint Approximate Diagonalization of Eigen-matrices) algorithm.\n\nArguments\n\ndata_w::AbstractMatrix{<:Real}   A matrix of size (n_samples, n_signals + 1) where the first column is time in seconds and the remaining columns are the observed signals.\nW_white::AbstractMatrix{<:Real} The whitening matrix of size (n_signals, n_signals) used to preprocess the data.\n\nReturns\n\nA matrix of size (n_samples, n_signals + 1) where the first column is time and the remaining columns are the estimated source signals after applying JADE.\n\n\n\n\n\n","category":"method"},{"location":"#ICAforECGrecordings.joint_diagonalization-Tuple{AbstractMatrix, Real, Number}","page":"Home","title":"ICAforECGrecordings.joint_diagonalization","text":"joint_diagonalization(CM::AbstractMatrix, threshhold::Real, m::Number)\n\nBlind separation of real signals with SHIBBS.\n\nArguments\n\nCM::AbstractMatrix: Matrix that contains the signals that have to be unmixed. \n\n-threshhold::Real: A threshhold for the for the rotation\n\nm::Number: The number of signals that should be extracted from CM. \n\nReturns  V = joint_diagonalization(CM, threshhold, m) a NxN diagonalized matrix.\n\n\n\n\n\n","category":"method"},{"location":"#ICAforECGrecordings.load_example_data-Tuple{}","page":"Home","title":"ICAforECGrecordings.load_example_data","text":"load_example_data()\n\nLoad example data from a .dat file for testing purposes. Returns a matrix containing the data.\n\n\n\n\n\n","category":"method"},{"location":"#ICAforECGrecordings.plot_dataset-Tuple{AbstractMatrix{Float64}}","page":"Home","title":"ICAforECGrecordings.plot_dataset","text":"plot_dataset(data::AbstractMatrix{Float64})\n\nPlot a dataset with time on the x-axis and multiple signals on the y-axis.\n\nArguments\n\ndata::AbstractMatrix{Float64}: Matrix where the first column represents time and the remaining columns represent different signals.\n\n\n\n\n\n","category":"method"},{"location":"#ICAforECGrecordings.read_dataset_from_dat-Tuple{String}","page":"Home","title":"ICAforECGrecordings.read_dataset_from_dat","text":"read_dataset_from_dat(Path :: String)\n\nReads a dataset from a .dat file.\n\nArguments\n\nPath::String: The path to the .dat file.\n\nReturns\n\nA matrix of type Float64 containing the data read from the file.\n\n\n\n\n\n","category":"method"},{"location":"#ICAforECGrecordings.shibbs","page":"Home","title":"ICAforECGrecordings.shibbs","text":"shibbs(X::AbstractMatrix,m::Int)\n\nBlind separation of real signals with SHIBBS.\n\nArguments\n\nX::AbstractMatrix:  Matrix that contains the signals that have to be unmixed. \nm=nothing: amount of signals that should be extracted from X. default same amount of singals as source\n\nReturns  B=shibbsR(X) a mxn separating matrix such that S=B*X is an mxT matrix of estimated source signals.\n\n\n\n\n\n","category":"function"},{"location":"#ICAforECGrecordings.solve-Tuple{JadeSeperator, AbstractMatrix}","page":"Home","title":"ICAforECGrecordings.solve","text":"solve(seperator::AbstractSeperator, data::AbstractMatrix) -> AbstractMatrix\n\nPerforms Independent Component Analysis (ICA) using the specified algorithm on the provided data.\n\nArguments\n\nseperator: An instance of AbstractSeperator, which can be JadeSeperator, ShibbsSeperator, or PicardoSeperator.\ndata: A matrix of size (n_{samples}, n_{signals} + 1) where the first column is time in seconds and data[:, 2:end] contains the signal measurements.\n\nReturns\n\nA matrix of size (n_{samples}, n_{signals} + 1) where the first column is time and [:, 2:end] are the separated signals.  \n\n\n\n\n\n","category":"method"},{"location":"#ICAforECGrecordings.solve-Tuple{ShibbsSeperator, AbstractMatrix}","page":"Home","title":"ICAforECGrecordings.solve","text":"solve(seperator::ShibbsSeperator, data::AbstractMatrix) -> AbstractMatrix\n\nPerforms Independent Component Analysis (ICA) using the Shibbs algorithm on the provided data.\n\nArguments\n\nseperator: An instance of ShibbsSeperator.\ndata: A matrix of size (n_{samples}, n_{signals} + 1) where the first column is time in seconds and data[:, 2:end] contains the signal measurements.\n\nReturns\n\nA matrix of size (n_{samples}, n_{signals} + 1) where the first column is time and [:, 2:end] are the separated signals.\n\n\n\n\n\n","category":"method"},{"location":"#ICAforECGrecordings.whiten-Tuple{AbstractMatrix}","page":"Home","title":"ICAforECGrecordings.whiten","text":"whiten(data::AbstractMatrix) -> Tuple{Matrix, Matrix}\n\nPerforms whitening on the given data matrix.\n\nWhitening transforms the input signals so that each signal has unit variance and all signals are uncorrelated. This is a common preprocessing step before applying Independent Component Analysis (ICA).\n\nArguments\n\ndata: An abstract matrix of size (n_samples, n_signals+1) where the first column is time and the remaining n_signals columns are the observed signals.\n\nReturns\n\ndata_white::Matrix: A matrix of the same size as data, where the first column is the original time vector and the remaining columns are the whitened signals.\nW_white::Matrix: The whitening transform matrix of size (n_signals, n_signals) such that X_white = X_centered * W_white.\n\n\n\n\n\n","category":"method"}]
}
